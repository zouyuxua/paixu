#include <iostream>
#include <cstdio>
using namespace std;
int maxbit(int [], int); 
void RadixSort(int *,int);
void input(int *,int);
int main()
{
	int a[10] = {11,73,543,21,66,34,47,400,14,4};
	int len = sizeof(a)/sizeof(int);
	cout << "排序前：" << endl;
	input(a,len);
	RadixSort(a,len);
	cout << "\n\n排序后(插入排序)：" << endl;
	input(a,len);
	return 0;
}
int maxbit(int a[], int n) //辅助函数，求数据的最大位数
{
    int maxA = a[0];      ///< 最大数
    /// 先求出最大数，再求其位数，这样有原先依次每个数判断其位数，稍微优化点。
    for (int i = 1; i < n; ++i)
    {
        if (maxA < a[i])
            maxA = a[i];
    }
    int d = 1;
    int p = 10;
    while (maxA >= p)
    {
        //p *= 10; // Maybe overflow
        maxA /= 10;
        ++d;
    }
    return d;
}
void RadixSort(int a[], int n) //基数排序
{
    int d = maxbit(a, n);
    int *tmp = new int[n];
    int *count = new int[10]; //计数器
    int i, j, k;
    int radix = 1;
    for(i = 1; i <= d; i++) //进行d次排序
    {
        for(j = 0; j < 10; j++)
            count[j] = 0; //每次分配前清空计数器
        for(j = 0; j < n; j++)
        {
            k = (a[j] / radix) % 10; //统计每个桶中的记录数
            count[k]++;
        }
        for(j = 1; j < 10; j++)
            count[j] = count[j - 1] + count[j]; //将tmp中的位置依次分配给每个桶
        for(j = n - 1; j >= 0; j--) //将所有桶中记录依次收集到tmp中
        {
            k = (a[j] / radix) % 10;
            tmp[count[k] - 1] = a[j];
            count[k]--;
        }
        for(j = 0; j < n; j++) //将临时数组的内容复制到数组a中
            a[j] = tmp[j];
        radix = radix * 10;
    }
    delete []tmp;
    delete []count;
}
void input(int *a,int length)  //用于输出数组的函数 
{
	for(int i = 0;i < length;i++)
	{
		cout << a[i] << "\t";
	}
}
